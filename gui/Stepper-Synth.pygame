#!/usr/bin/python
import pygame
from pygame.rect import Rect
from stepper_synth_backend import start_audio as start_synth, PythonCmd, State, SynthEngineType
from pathlib import Path
from logging import DEBUG, INFO
# from stepper_synth.synth_state import SynthState
from stepper_synth.effect_menu import draw_effect_menu, effect_menu_controles, reset_effect_menu
from stepper_synth.engine_menu import draw_engine_menu, reset_engine_menu, engine_menu_controles
from stepper_synth.config import *
from stepper_synth.organ_screen import draw_organ, organ_controls
from stepper_synth.sub_synth_screen import draw_sub_synth, sub_synth_controls
from stepper_synth.controls import buttons, Buttons
from stepper_synth.logger import get_logger
# import stepper_synth
#
# print(dir(stepper_synth))
# print(stepper_synth.__path__)
# print(stepper_synth_helpers.__file__)


THIS_DIR = Path(__file__)
THIS_DIR = THIS_DIR.parent.absolute()
# print("this dir: ", THIS_DIR)
ENGINE_MENU = False
EFFECT_MENU = False

pygame.init()
# pygame.joystick.init()
controller_found = False
joy = None
screen = pygame.display.set_mode(SCREEN_SIZE)
pygame.font.init()
fonts = [pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 45),
         pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 30),
         pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 75)]
clock = pygame.time.Clock()
done = False
log = get_logger("MIDI-Tracker", DEBUG)
controller = Buttons()

ipc, state = start_synth()


def clear_screen():
    # screen.fill((30, 30, 46))
    screen.fill(BACKGROUND_COLOR)


def draw_text(text):
    arg = text.text
    font = fonts[0]
    color = text.color
    display = font.render(
        arg, True, color)
    textRect = display.get_rect()

    x, y = text.ancor

    textRect.center = (x, y)

    if not text.center:
        textRect.left = x

    screen.blit(display, textRect)


def draw_rect(rect_cmd):
    # arg = text.text
    # font = fonts[0]
    color = rect_cmd.fill_color
    # display = font.render(
    #     arg, True, color)
    # textRect = display.get_rect()

    # x, y = text.ancor

    # textRect.center = (x, y)
    (left, top) = rect_cmd.ancor
    (width, height) = rect_cmd.size

    rect = Rect((top, left), (width, height))

    if rect_cmd.center:
        rect.center = (left, top)

    # print(f"drawing rect => Rect(({top}, {left}), ({width}, {height}))")

    pygame.draw.rect(screen, color, rect)

    # screen.blit(display, textRect)


def check_controller_input(event):
    global controller

    if event.type == pygame.JOYHATMOTION:
        controller.purge_dpad()

        match event.value:
            case (_, 1):
                controller.press((0, 1))
            case (_, -1):
                controller.press((0, -1))

        match event.value:
            case (1, _):
                controller.press((1, 0))
            case (-1, _):
                controller.press((-1, 0))

    elif event.type == pygame.JOYBUTTONUP:
        controller.release(event.button)
    elif event.type == pygame.JOYBUTTONDOWN:
        controller.press(event.button)
    elif event.type == pygame.JOYAXISMOTION and event.axis == 4 and event.value > 0.0:
        controller.press(buttons.get("lt"))
        # tracker_ipc.send(InputCMD.ButtonPress(Button.LTrig))
    elif event.type == pygame.JOYAXISMOTION and event.axis == 5 and event.value > 0.0:
        controller.press(buttons.get("rt"))
    elif event.type == pygame.JOYAXISMOTION and event.axis == 4 and event.value < 0.0:
        controller.press(buttons.get("lt"))
        # tracker_ipc.send(InputCMD.ButtonPress(Button.LTrig))
    elif event.type == pygame.JOYAXISMOTION and event.axis == 5 and event.value < 0.0:
        controller.press(buttons.get("rt"))

    # if event.type == pygame.JOYAXISMOTION and (event.axis == 5 or event.axis == 4):
    #     print(f"button-event: {event}")
    # pass


def handle_pygame_events():
    global joy
    global controller_found
    global ENGINE_MENU
    global EFFECT_MENU

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            # stop_synth()
            return True
        elif event.type == pygame.JOYDEVICEADDED:
            joy = pygame.joystick.Joystick(event.device_index)
            controller_found = True

        if controller_found:
            check_controller_input(event)

    if controller.is_pressed(buttons.get("home")) and controller.just_released(buttons.get("start")):
        # stop_synth()
        return True

    x_pressed = controller.just_released(buttons.get("x"))
    y_pressed = controller.just_released(buttons.get("y"))

    if x_pressed and not EFFECT_MENU:
        ENGINE_MENU = not ENGINE_MENU

    if y_pressed and not ENGINE_MENU:
        EFFECT_MENU = not EFFECT_MENU

    # print(f"x-pressed = {x_pressed}, ENGINE_MENU = {ENGINE_MENU}")

    return False


def draw(synth_state: State):
    """draws the synth ui to the screen"""
    # print(dir(synth_state))
    global ENGINE_MENU
    global EFFECT_MENU

    loc_controller = controller if not ENGINE_MENU else Buttons()

    match synth_state.engine:
        case SynthEngineType.B3Organ:
            draw_organ(pygame, screen, fonts, synth_state)
            organ_controls(pygame, loc_controller, ipc, synth_state)
        case SynthEngineType.SubSynth:
            draw_sub_synth(pygame, screen, fonts, synth_state)
            sub_synth_controls(pygame, loc_controller, ipc, synth_state)

    # TODO: draw volume & battery
    # TODO: draw engine menu
    if ENGINE_MENU:
        draw_engine_menu(pygame, screen, fonts, synth_state)
        engine_changed = engine_menu_controles(ipc, controller, synth_state)
        ENGINE_MENU = engine_changed is None or not engine_changed
    elif EFFECT_MENU:
        draw_effect_menu(pygame, screen, fonts, synth_state)
        effect_changed = effect_menu_controles(ipc, controller, synth_state)
        EFFECT_MENU = effect_changed is None or not effect_changed
    else:
        reset_engine_menu()
        reset_effect_menu()


def proccess_cmd():
    global state

    new_state = ipc.recv_all()

    if new_state and new_state[-1]:
        # print("got new state")
        draw(new_state[-1])
        state = new_state[-1]
    else:
        draw(state)

    pygame.display.update()


def loop_clean_up():
    global controller

    controller.step()
    clock.tick()


def step():
    clear_screen()


def stop_synth():
    log.warning("stopping synth")
    ipc.send(PythonCmd.Exit())
    pygame.quit()


if __name__ == "__main__":
    # ipc.send(PythonCmd.ChangeSynthEngine(SynthEngineType.SubSynth))

    while not handle_pygame_events():
        proccess_cmd()
        step()
        loop_clean_up()

    stop_synth()
    log.warning("DONE")
    # quit()
