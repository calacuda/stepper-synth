#!/usr/bin/python
from dataclasses import dataclass
from stepper_synth.logger import get_logger
from stepper_synth.controls import buttons, Buttons
from stepper_synth.sub_synth_screen import draw_sub_synth, sub_synth_controls
from stepper_synth.organ_screen import draw_organ, organ_controls
from stepper_synth.config import *
from stepper_synth.engine_menu import draw_engine_menu, reset_engine_menu, engine_menu_controls
from typing import Callable, Tuple
import pygame
from stepper_synth_backend import StepperSynth, SynthEngineType, StepperSynthState, EffectType, Screen, WTSynthParam
from pathlib import Path
from logging import DEBUG, INFO
from stepper_synth.wt import draw_wave_table, wave_table_controls
from stepper_synth.stepper import draw_stepper, stepper_controls
from stepper_synth.reverb_menu import draw_reverb_menu, reverb_controls


THIS_DIR = Path(__file__)
THIS_DIR = THIS_DIR.parent.absolute()
SYNTH_MENU = False
# EFFECT_MENU = False

pygame.init()
controller_found = False
joy = None
screen = pygame.display.set_mode(SCREEN_SIZE)
pygame.font.init()
fonts = [
    pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 45),  # 0
    pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 30),  # 1
    pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 75),  # 2
    pygame.font.Font(f'{THIS_DIR}/Anonymous-Pro.ttf', 20),  # 3
]
clock = pygame.time.Clock()
done = False
log = get_logger("Stepper-Synth", DEBUG)
controller = Buttons()

synth = StepperSynth()
log.debug("after synth")
state = synth.get_state()
log.debug("got state")


@dataclass
class Logger:
    debug = log.debug
    info = log.info
    warn = log.warning
    error = log.error
    critical = log.critical


def do_nothing(rect: pygame.Rect) -> pygame.Rect:
    return rect


@dataclass
class DrawMenuArgs:
    log = Logger()
    pygame = pygame
    screen = screen
    fonts = fonts
    state = state
    synth = synth
    controller = controller

    def draw_text(self, text: str, font: int, where: Tuple[float, float], color=TEXT_COLOR_1, rect_callback: Callable[[pygame.Rect], pygame.Rect] = do_nothing):
        display = self.fonts[font].render(
            text, True, color)
        text_rect = display.get_rect()
        x, y = where
        text_rect.center = (int(x), int(y))
        text_rect = rect_callback(text_rect)

        screen.blit(display, text_rect)

    # def draw_rect(self, rect_cmd):
    #     color = rect_cmd.fill_color
    #     (left, top) = rect_cmd.ancor
    #     (width, height) = rect_cmd.size
    #
    #     rect = Rect((top, left), (width, height))
    #
    #     if rect_cmd.center:
    #         rect.center = (left, top)
    #
    #     pygame.draw.rect(screen, color, rect)


def clear_screen():
    screen.fill(BACKGROUND_COLOR)


def check_controller_input(events):
    global controller

    for event in events:
        # TODO: make this a match statement
        if event.type == pygame.JOYHATMOTION:
            controller.purge_dpad()

            match event.value:
                case (_, 1):
                    controller.press((0, 1))
                case (_, -1):
                    controller.press((0, -1))

            match event.value:
                case (1, _):
                    controller.press((1, 0))
                case (-1, _):
                    controller.press((-1, 0))

        elif event.type == pygame.JOYBUTTONUP:
            controller.release(event.button)
        elif event.type == pygame.JOYBUTTONDOWN:
            controller.press(event.button)
        elif event.type == pygame.JOYAXISMOTION and event.axis == 4 and event.value > 0.0:
            controller.press(buttons.get("lt"))
        elif event.type == pygame.JOYAXISMOTION and event.axis == 5 and event.value > 0.0:
            controller.press(buttons.get("rt"))
        elif event.type == pygame.JOYAXISMOTION and event.axis == 4 and event.value < 0.0:
            controller.press(buttons.get("lt"))
            # tracker_ipc.send(InputCMD.ButtonPress(Button.LTrig))
        elif event.type == pygame.JOYAXISMOTION and event.axis == 5 and event.value < 0.0:
            controller.press(buttons.get("rt"))

        # if event.type == pygame.JOYAXISMOTION and (event.axis == 5 or event.axis == 4):
        #     print(f"button-event: {event}")


def handle_pygame_events():
    global joy
    global controller_found
    global SYNTH_MENU
    # global EFFECT_MENU

    ctrlr_events = []

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            return True
        elif event.type == pygame.JOYDEVICEADDED:
            joy = pygame.joystick.Joystick(event.device_index)
            controller_found = True
        elif event.type == pygame.JOYHATMOTION or event.type == pygame.JOYBUTTONUP or event.type == pygame.JOYBUTTONDOWN or event.type == pygame.JOYAXISMOTION:
            ctrlr_events.append(event)

        # if controller_found:
        #     check_controller_input(event)
    if controller_found and ctrlr_events:
        check_controller_input(ctrlr_events)

    if controller.is_pressed(buttons.get("home")) and controller.just_released(buttons.get("start")):
        # stop_synth()
        return True

    x_pressed = controller.just_released(buttons.get("x"))
    b_pressed = controller.just_released(buttons.get("b"))
    # y_pressed = controller.just_released(buttons.get("y"))

    if x_pressed:
        SYNTH_MENU = not SYNTH_MENU
    elif b_pressed and SYNTH_MENU:
        SYNTH_MENU = False

    # if y_pressed and not SYNTH_MENU:
    #     EFFECT_MENU = not EFFECT_MENU

    # print(f"x-pressed = {x_pressed}, SYNTH_MENU = {SYNTH_MENU}")

    return False


def do_nothing_control_f(*args, **kwargs):
    pass


def draw(synth_state):
    """draws the synth ui to the screen"""
    # print(dir(synth_state))
    global SYNTH_MENU
    # global EFFECT_MENU
    global synth

    loc_controller = controller if not SYNTH_MENU else Buttons()

    # print(synth_state)

    controls_f = do_nothing_control_f
    controls_args = []

    match synth_state:
        case StepperSynthState.Synth(engine=SynthEngineType.B3Organ):
            draw_organ(pygame, screen, fonts, synth_state)
            controls_f = organ_controls
            controls_args = [pygame, loc_controller, synth, synth_state]
        case StepperSynthState.Synth(engine=SynthEngineType.SubSynth):
            draw_sub_synth(pygame, screen, fonts, synth_state)
            controls_f = sub_synth_controls
            controls_args = [pygame, loc_controller, synth, synth_state]
        # case StepperSynthState.Synth(engine=SynthEngineType.WaveTable):
        #     # log.warning("WaveTable screen not yet programmed")
        #     pass
        case StepperSynthState.Effect(effect=EffectType.Reverb):
            draw_reverb_menu(pygame, screen, fonts, synth_state)
            controls_f = reverb_controls
            controls_args = [pygame, loc_controller, synth, synth_state]
        case StepperSynthState.Effect(effect=EffectType.Chorus):
            # log.warning("Chorus screen not yet programmed")
            pass
        case StepperSynthState.MidiStepper():
            draw_stepper(pygame, screen, fonts, synth_state)
            controls_f = stepper_controls
            controls_args = [pygame, loc_controller, synth, synth_state]
        case StepperSynthState.WaveTable():
            draw_wave_table(pygame, screen, fonts, synth_state)
            controls_f = wave_table_controls
            controls_args = [pygame, loc_controller, synth, synth_state]

    # TODO: draw volume & battery
    # draw engine menu

    if SYNTH_MENU:
        draw_engine_menu(pygame, screen, fonts)
        (synth, engine_changed) = engine_menu_controls(synth, controller)
        SYNTH_MENU = engine_changed is None or not engine_changed
    # elif EFFECT_MENU:
    #     draw_effect_menu(pygame, screen, fonts)
    #     (synth, effect_changed) = effect_menu_controls(synth, controller)
    #     EFFECT_MENU = effect_changed is None or not effect_changed
    else:
        tmp_synth = controls_f(*controls_args)
        synth = tmp_synth if tmp_synth is not None else synth
        reset_engine_menu()
        # reset_effect_menu()


def process_cmd():
    global state
    global synth

    # new_state = ipc.get_Stat()

    # print(f"state in MidiStepper => {isinstance(
    #     state, StepperSynthState.MidiStepper)}")
    # print("process_cmd called")
    if synth.updated() or isinstance(state, StepperSynthState.MidiStepper):
        # print("got new state")
        new_state = synth.get_state()
        # print("new_state acquired ")
        draw(new_state)
        state = new_state
    else:
        # print("did not get new state")
        draw(state)

    pygame.display.update()


def loop_clean_up():
    global controller

    controller.step()
    clock.tick()


def step():
    clear_screen()


def stop_synth():
    log.warning("stopping synth")
    synth.exit()
    pygame.quit()


def test_add_mod_mat():
    src = "Lfo = 0"
    dest = "[Osc]\nosc = 1\nparam = \"Level\""

    item = WTSynthParam.ModMatrixAdd(src, dest, 0.5, False)
    synth.wt_param_setter(item)


if __name__ == "__main__":
    # ipc.send(PythonCmd.ChangeSynthEngine(SynthEngineType.SubSynth))
    # synth.set_screen(Screen.Effect(EffectType.Reverb))
    # synth.set_screen(Screen.Synth(SynthEngineType.SubSynth))
    # synth.set_screen(Screen.Synth(SynthEngineType.Wurlitzer))
    synth.set_screen(Screen.WaveTableSynth())
    # synth.set_screen(Screen.Stepper(0))
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()
    # test_add_mod_mat()

    log.info("starting main loop.")

    while not handle_pygame_events():
        step()
        process_cmd()
        loop_clean_up()

    stop_synth()
    log.warning("DONE")
    # quit()
